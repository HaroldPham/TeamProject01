import java.util.*;
import java.io.*;

public class GenealogySort{
	
   private static ArrayList<Person> family = new ArrayList<>();
	
   public static void main(String[] args) throws FileNotFoundException
   {
      File names = new File("tudor.dat"); //declares file to search
      Scanner console = new Scanner(names); //scans file
      readFile(console); //constructs the array list from the file
      searchPrompt(); //runs the prompt passing the arraylist
      
   }
   
   
 //Works
   public static void searchPrompt() throws FileNotFoundException //Searches for person name inside arraylist family
   {
	   
         Scanner console = new Scanner(System.in); //scans user input
         System.out.println("Person's name? (quit to exit): "); //Prompts the user for name
         String name = console.nextLine().toLowerCase(); //declares name, makes lower case for file search
         int nameIndex = find(name); //search the file for the name location
        
         while (!name.equals("quit")) //if name is not "quit" run method
         { 

            if (nameIndex >= 0) //name was found
            { 
               sort(nameIndex); //execute sort, passing String name declared above
            } 
            else 
            {
               System.out.println("Name not found. Try again!"); //else loop
            }
            System.out.println("Person's name? (quit to exit): "); //fencepost
            name = console.nextLine();
         }
         System.out.println("Thank you for using our program!"); //exit
         
   }
   
   
//Works
   public static void readFile (Scanner console)//this should read the file, and input data into an array list
   {
	   //while files has a line, read it and add to array.
	   String name;
	   while (console.hasNextLine()) {
	      name = console.nextLine().toLowerCase();//makes all the names lower case to prevent case sensitivity
	      
         //reads to the first END to collect all the names
         if (name.equals("end")) {
            break;
         }
            
	      Person familyLine = new Person(name);
	
	      family.add(familyLine);
	   }
      
      //while continuing file has a line, read it and add lineage using mutators
	   String children;
	   while (console.hasNextLine()) {
	      children = console.nextLine().toLowerCase();//makes all the names lower case to prevent case sensitivity
	      
         //reads to the second END to collect all the names
         if (children.equals("end")) {
            break;
         }
         
         //following lines MUST be mother and father
         String maternalName = console.nextLine().toLowerCase();
         String paternalName = console.nextLine().toLowerCase();
         
         //finds the location in the file
         int childFound = find(children);
         int momFound = find(maternalName);
         int dadFound = find(paternalName);
         
         
         //if the name is found in the family array, apply the mutator to account for lineage, else add a mom
         if (momFound > 0) {
            family.get(childFound).addMother(family.get(momFound));
         }
         
         //repeat add person but with mother mutator applied
	      Person maternalLine = new Person(maternalName);
	      family.add(maternalLine);
         family.get(childFound).addMother(maternalLine);
         
         //if the name is found in the family array, apply the mutator to account for lineage, else add a dad
         if (dadFound > 0) {
            family.get(childFound).addFather(family.get(dadFound));
         }
         
         //repeat add person but with father mutator applied
	      Person paternalLine = new Person(paternalName);
	      family.add(paternalLine);
         family.get(childFound).addFather(paternalLine);
	   }

	}
	      

    //receives name from searchPrompt
    public static void sort (int nameIndex) 
    { 
         Person found = family.get(nameIndex); //Important
         
         //displays mother
         System.out.println("Maternal Line:");
         System.out.println("\t" + found.getName());
         System.out.println("\t\t" +  found.getMother());

         //Displays father
         System.out.println("Paternal Line:");
         System.out.println("\t" + found.getName());
         System.out.println("\t\t" +  found.getFather());
         
         //displays Children      
         System.out.println("Children:");
         System.out.println("\t" + found.getName());
         System.out.println("\t\t" +  found.getChildren());

   }

    
    
//Works
   // search function to determine if name exists in arraylist family. Returns -1 if not found
   public static int find(String name) 
   {
      for(int i=0; i<family.size(); i++) 
      {
         if (family.get(i).getName().equals(name)) 
         {
            return i;
         }
      }
      return -1;
   }
   
   
}
